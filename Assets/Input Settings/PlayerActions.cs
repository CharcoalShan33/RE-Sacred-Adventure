//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Input Settings/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Player Level"",
            ""id"": ""ef2017a4-43d4-4d87-a30b-b5c002e26f2f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""bb6e814c-192f-4992-9223-6003f59f8b71"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""24817dc2-e799-4820-9d07-67ab3b75955f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hit"",
                    ""type"": ""Button"",
                    ""id"": ""c944caf6-080b-41d2-9b84-2fafb70c95ac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""810ea2e7-0b96-45d0-8fa2-4b3848a4c022"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""82b013ab-97b8-43da-8301-82cdfe0d9fc1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""bd532b36-1720-49b6-88c3-45bb5f2de78f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""d612405d-4ffd-4686-91df-78e8f54b0f0c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""7c15a6ac-fb6f-4045-9afa-5aa66c0f8bc2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6deac77e-833c-47c2-a47d-1dda338bfe6a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a23425da-3329-4564-8707-448fa0819d68"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Battle Level"",
            ""id"": ""23c26cea-eae1-4a24-8d45-0dba94c5b483"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""201678ff-d1a8-4458-b2f5-05f5df7f30ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ccb8aeca-f8c3-4b09-84f1-e779dae000dd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Major Controls"",
            ""bindingGroup"": ""Major Controls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player Level
        m_PlayerLevel = asset.FindActionMap("Player Level", throwIfNotFound: true);
        m_PlayerLevel_Movement = m_PlayerLevel.FindAction("Movement", throwIfNotFound: true);
        m_PlayerLevel_Run = m_PlayerLevel.FindAction("Run", throwIfNotFound: true);
        m_PlayerLevel_Hit = m_PlayerLevel.FindAction("Hit", throwIfNotFound: true);
        // Battle Level
        m_BattleLevel = asset.FindActionMap("Battle Level", throwIfNotFound: true);
        m_BattleLevel_Select = m_BattleLevel.FindAction("Select", throwIfNotFound: true);
    }

    ~@PlayerActions()
    {
        UnityEngine.Debug.Assert(!m_PlayerLevel.enabled, "This will cause a leak and performance issues, PlayerActions.PlayerLevel.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_BattleLevel.enabled, "This will cause a leak and performance issues, PlayerActions.BattleLevel.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Level
    private readonly InputActionMap m_PlayerLevel;
    private List<IPlayerLevelActions> m_PlayerLevelActionsCallbackInterfaces = new List<IPlayerLevelActions>();
    private readonly InputAction m_PlayerLevel_Movement;
    private readonly InputAction m_PlayerLevel_Run;
    private readonly InputAction m_PlayerLevel_Hit;
    public struct PlayerLevelActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerLevelActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerLevel_Movement;
        public InputAction @Run => m_Wrapper.m_PlayerLevel_Run;
        public InputAction @Hit => m_Wrapper.m_PlayerLevel_Hit;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLevel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLevelActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerLevelActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerLevelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerLevelActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Hit.started += instance.OnHit;
            @Hit.performed += instance.OnHit;
            @Hit.canceled += instance.OnHit;
        }

        private void UnregisterCallbacks(IPlayerLevelActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Hit.started -= instance.OnHit;
            @Hit.performed -= instance.OnHit;
            @Hit.canceled -= instance.OnHit;
        }

        public void RemoveCallbacks(IPlayerLevelActions instance)
        {
            if (m_Wrapper.m_PlayerLevelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerLevelActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerLevelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerLevelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerLevelActions @PlayerLevel => new PlayerLevelActions(this);

    // Battle Level
    private readonly InputActionMap m_BattleLevel;
    private List<IBattleLevelActions> m_BattleLevelActionsCallbackInterfaces = new List<IBattleLevelActions>();
    private readonly InputAction m_BattleLevel_Select;
    public struct BattleLevelActions
    {
        private @PlayerActions m_Wrapper;
        public BattleLevelActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_BattleLevel_Select;
        public InputActionMap Get() { return m_Wrapper.m_BattleLevel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleLevelActions set) { return set.Get(); }
        public void AddCallbacks(IBattleLevelActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleLevelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleLevelActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(IBattleLevelActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(IBattleLevelActions instance)
        {
            if (m_Wrapper.m_BattleLevelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleLevelActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleLevelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleLevelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleLevelActions @BattleLevel => new BattleLevelActions(this);
    private int m_MajorControlsSchemeIndex = -1;
    public InputControlScheme MajorControlsScheme
    {
        get
        {
            if (m_MajorControlsSchemeIndex == -1) m_MajorControlsSchemeIndex = asset.FindControlSchemeIndex("Major Controls");
            return asset.controlSchemes[m_MajorControlsSchemeIndex];
        }
    }
    public interface IPlayerLevelActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnHit(InputAction.CallbackContext context);
    }
    public interface IBattleLevelActions
    {
        void OnSelect(InputAction.CallbackContext context);
    }
}
